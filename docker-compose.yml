services:
  recommendation-service:
    container_name: recommendation-service
    ports:
      - "8050:8050"
    depends_on:
      tourism-db:
        condition: service_healthy
    networks:
      - app_network
    volumes:
      - ./recommendation-service:/app
    image: bakytzhannurmagambetov/recommendation-service:latest


  notification-service:
    container_name: notification-service
    ports:
      - "8070:8070"
    depends_on:
      tourism-db:
        condition: service_healthy
      kafka:
        condition: service_healthy
    networks:
      - app_network
    image: bakytzhannurmagambetov/notification-service:latest


  social-service:
    container_name: social-service
    ports:
      - "8060:8060"
    depends_on:
      tourism-db:
        condition: service_healthy
      kafka:
        condition: service_healthy
    networks:
      - app_network
    build:
      context: ./social-service


  tourism-backend:
    container_name: tourism-backend
    ports:
      - "8080:8080"
    depends_on:
      tourism-db:
        condition: service_healthy
      kafka:
        condition: service_healthy
    networks:
      - app_network
    build:
      context: ./tourism-backend
    volumes:
      - ./tourism-backend:/go/src/app
      - tourism-backend-bin:/go/bin
      - tourism-backend-pkg:/go/pkg
      - tourism-backend-uploads:/app/uploads
    working_dir: /go/src/app
    environment:
      - GOPATH=/go
      - GOCACHE=/go/cache

  auth-service:
    container_name: auth-service
    ports:
      - "8090:8090"
    depends_on:
      tourism-db:
        condition: service_healthy
      kafka:
        condition: service_healthy
    networks:
      - app_network
    image: bakytzhannurmagambetov/auth-service:latest

#  api-gateway:
#    container_name: api-gateway
#    ports:
#      - "8000:8000"
#    networks:
#      - app_network
#    image: bakytzhannurmagambetov/api-gateway:latest
  api-gateway:
    container_name: api-gateway
    build:
      context: ./api-gateway
    ports:
      - "8000:8000"
    networks:
      - app_network


  tourism-db:
    container_name: tourism-db
    image: ankane/pgvector
    volumes:
      - pg-data:/var/lib/postgresql/data
    environment:
      POSTGRES_DB: ${PG_DB}
      POSTGRES_USER: ${PG_USER}
      POSTGRES_PASSWORD: ${PG_PASSWORD}
    ports:
      - "5432:5432"
    networks:
      - app_network
    env_file:
      - .env
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U ${PG_USER} -d ${PG_DB}" ]
      interval: 10s
      timeout: 5s
      retries: 5

  zookeeper:
    image: confluentinc/cp-zookeeper:7.3.0
    container_name: zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    networks:
      - app_network

  kafka:
    image: confluentinc/cp-kafka:7.3.0
    container_name: kafka
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_CONFLUENT_TOPIC_REPLICATION_FACTOR: 1

    depends_on:
      - zookeeper
    networks:
      - app_network
    healthcheck:
      test: [ "CMD-SHELL", "kafka-topics --list --bootstrap-server kafka:9092" ]
      interval: 10s
      timeout: 5s
      retries: 10

networks:
  app_network:
    driver: bridge

volumes:
  kafka-volume:
  zookeeper-volume:
  pg-data:
  tourism-backend-bin:
  tourism-backend-pkg:
  tourism-backend-uploads: